Features:
    Table Schema Sync:
        ☐ column type support
            ✔ Literal column type with no checks @done (2/17/2021, 4:10:08 PM)
            ☐ Automatic SQL column type inference from Rust type
        ✔ allow null support @done (2/17/2021, 4:09:54 PM)
        ☐ default value support
            ✔ Literal value @done (2/17/2021, 4:09:51 PM)
            ☐ closure value returning a literal
            ☐ Proper escaping depending on the type of value
            ☐ SQL function that needs to not be escaped
        ☐ Primary key support
            ✔ Definining a field primary key @done (2/17/2021, 4:09:25 PM)
            ☐ Defining a compound primary key across multiple fields
        ☐ Auto increment support
            ✔ Basic tagging of a primary key column with auto increment @done (2/17/2021, 4:09:48 PM)
            ☐ PostGres auto increment identity support (`GENERATED BY DEFAULT AS IDENTITY`)
        ☐ Column Comment support
            ☐ MySQL Inline comments
            ☐ For the rest use `COMMENT ON COLUMN table IS 'comment'`
        ☐ ON DELETE/UPDATE support
            ☐ CASCADE
            ☐ RESTRICT
            ☐ SET DEFAULT
            ☐ SET NULL
            ☐ NO ACTION
        ☐ Indexes support
            ☐ Index types
                ✔ UNIQUE index definition like primary key definition (single/compound w/ index name) @done (2/17/2021, 4:09:18 PM)
                ☐ SPATIAL index definition
                ☐ FULLTEXT index definition
            ☐ Index methods
                ☐ BTREE
                ☐ HASH
                ☐ PostGres-exclusive GIST & GIN
            ☐ PostGres-exclusive concurrent indexes
            ☐ list of fields to index
        ☐ Support for safe sync at compile time (CREATE TABLE IF NOT EXISTS)
        ☐ Support for force sync at compile time (DROP TABLE; before safe sync)
        ☐ Support for alter sync at compile time (Diff + ALTER TABLE + drop & recreate indexes if needed)
    Freestanding Queries & Finders:
        ☐ Transaction support
        ☐ Query Arguments struct
            ☐ `where` HashMap
            ☐ `Operator` enum for the where search
            ☐ `attributes` struct
                ☐ `include` Vec
                ☐ `exclude` Vec
            ☐ `include` options for Eager Loading
            ☐ `order` params for ORDER BY statements
            ☐ `transaction` binding
            ☐ `having` parameter
        ☐ `find_all` method
        ☐ `find_one` method
        ☐ `find_and_count_all` method
        ☐ `find_or_create` method
        ☐ `find_create_find` method
        ☐ `upsert` method
